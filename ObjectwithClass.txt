Setter Methods:

Setter methods don’t return what you might think. When you use the syntactic sugar that lets you make calls to = methods look like assignments, Ruby takes the assignment semantics seriously. Assignments (like  x = 1) evaluate to whatever’s on their right-hand side. Methods usually
return the value of the last expression evaluated during execution. But = method calls behave like assignments: the value of the expression ticket.price = 63.00 is 63.00, even if the ticket= method returns the string “Ha ha!” The idea is to keep the semantics consistent. Under the
hood, it’s a method call; but it looks like an assignment and behaves like an assignment with respect to its value as an expression.

Iterator:

An iterator is a Ruby method that has an extra ingredient in its calling syntax: it expects you to provide it with a code block. The curly
braces in the loop example delimit the block; the code in the block consists of the puts statement.

   The loop method has access to the code inside the block: the method can call (execute) the block. To do this from an iterator of your own, you use the keyword yield. Together, the code block (supplied by the calling code) and yield (invoked from within the method) are the chief ingredients of iteration.
loop itself is written in C (and uses a C function to achieve the same effect as yield). But the whole idea of looping suggests an interesting exercise: re-implementing loop in pure Ruby. This exercise will give you a first glimpse at yield in action.


Map method:

The map method works through an array one item at a time, calling the code block once for each item and creating a new array consisting of the results of all of those
calls to the block. 
